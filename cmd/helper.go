package cmd

import (
	"encoding/json"
	"errors"
	"strings"

	"github.com/cage1016/wason-translate/lib"
	"github.com/manifoldco/promptui"
	"github.com/sirupsen/logrus"
)

type promptContent struct {
	errorMsg string
	label    string
}

func promptGetInput(pc promptContent, deVal string) string {
	validate := func(input string) error {
		if len(input) <= 0 {
			return errors.New(pc.errorMsg)
		}
		return nil
	}

	templates := &promptui.PromptTemplates{
		Prompt:  "{{ . }} ",
		Valid:   "{{ . | green }} ",
		Invalid: "{{ . | red }} ",
		Success: "{{ . | bold }} ",
	}

	prompt := promptui.Prompt{
		Label:     pc.label,
		Templates: templates,
		Validate:  validate,
		Default:   deVal,
	}

	result, err := prompt.Run()
	if err != nil {
		logrus.Fatalf("Prompt failed %v\n", err)
	}

	return result
}

func promptGetSelect(pc promptContent, items []string) string {
	index := -1
	var result string
	var err error

	for index < 0 {
		prompt := promptui.SelectWithAdd{
			Label:    pc.label,
			Items:    items,
			AddLabel: "Other",
		}

		index, result, err = prompt.Run()

		if index == -1 {
			items = append(items, result)
		}
	}

	if err != nil {
		logrus.Fatalf("Prompt failed %v\n", err)
	}

	return result
}

func documentsSelect(input []byte, label string) (*lib.Document, error) {
	buf := lib.AutoGenerated{}
	err := json.Unmarshal(input, &buf)
	if err != nil {
		logrus.Errorf("Error unmarshaling documents: %s", err)
		return nil, err
	}

	templates := &promptui.SelectTemplates{
		Label:    "{{ . }}?",
		Active:   "\U0001F336 {{ .Filename | cyan }} ({{ .Status | red }})",
		Inactive: "  {{ .Filename | cyan }} ({{ .Status | red }})",
		Selected: "\U0001F336 {{ .Filename | red | cyan }}",
		Details: `
--------- Pepper ----------
{{ "DocumentID:" | faint }}	{{ .DocumentID }}
{{ "Filename:" | faint }}	{{ .Filename }}
{{ "Status:" | faint }}	{{ .Status }}
{{ "ModelID:" | faint }}	{{ .ModelID }}
{{ "Source:" | faint }}	{{ .Source }}
{{ "Target:" | faint }}	{{ .Target }}
{{ "WordCount:" | faint }}	{{ .WordCount }}
{{ "CharacterCount:" | faint }}	{{ .CharacterCount }}
{{ "Created:" | faint }}	{{ .Created }}
{{ "Completed:" | faint }}	{{ .Completed }}`,
	}

	searcher := func(input string, index int) bool {
		pepper := buf.Documents[index]
		name := strings.Replace(strings.ToLower(pepper.Filename), " ", "", -1)
		input = strings.Replace(strings.ToLower(input), " ", "", -1)

		return strings.Contains(name, input)
	}

	prompt := promptui.Select{
		Label:     label,
		Items:     buf.Documents,
		Templates: templates,
		Size:      4,
		Searcher:  searcher,
	}

	i, _, err := prompt.Run()

	if err != nil {
		logrus.Errorf("Prompt failed %v\n", err)
		return nil, err
	}

	return &buf.Documents[i], nil
}
